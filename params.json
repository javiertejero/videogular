{"name":"Videogular","tagline":"An HTML5 video player for AngularJS","body":"## Videogular\r\n\r\nVideogular is an HTML5 video player for AngularJS. Videogular is a wrapper over the HTML5 video tag, so you just could add whatever you want. This provides a very powerful, but simple to use solution, for everybody.\r\n\r\nYou could see a demo here: http://twofuckingdevelopers.com/examples/videogular/examples/\r\n\r\n## Why Videogular?\r\n\r\nWe're developing Videogular focusing on mobile devices and HTML5 video special capabilities. Videogular brings to you this key features:\r\n\r\n* **Bindable properties**: Videogular's directives are bindable, just [try the demo] (http://twofuckingdevelopers.com/examples/videogular/examples/) and play with bindings.\r\n* **Extendable through plugins**: Thanks to our API you can develop your own plugins.\r\n* **Theme based**: Customize it with your own themes and change between them on the fly.\r\n* **Native fullscreen support**: Enjoy with native fullscreen support for Chrome, Firefox, Safari, iOS and Chrome for Android.\r\n* **Mobile first**: Videogular can detect mobile devices to show/hide components in case that aren't supported.\r\n\r\n## How to use Videogular\r\n\r\nTo start using Videogular, just create a `DIV` with the `videogular` attribute and the `video` tag inside. In AngularJS the HTML5 `poster` video attribute is not supported, so you could use `vg-poster` to add your image to your video tag. With `vg-width` and `vg-height` directives you could set an Integer value or a binding to a scope variable. You don't need to set a width and height to video tag, Videogular will do that for you.\r\n\r\n```html\r\n<div videogular vg-width=\"width\" vg-height=\"height\">\r\n\t<video class='videoPlayer' controls preload='none' vg-poster='assets/images/oceans-clip.png'>\r\n\t\t<source src='assets/videos/oceans-clip.mp4' type='video/mp4'>\r\n\t\t<source src='assets/videos/oceans-clip.webm' type='video/webm'>\r\n\t\t<source src='assets/videos/oceans-clip.ogv' type='video/ogg'>\r\n\t</video>\r\n</div>\r\n```\r\n\r\nBecause `videogular` is an HTML5 video player for AngularJS it works (obviously) with all AngularJS directives.\r\n\r\n```html\r\n<div videogular vg-width=\"width\" vg-height=\"height\">\r\n\t<video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'>\r\n\t\t<source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'>\r\n\t</video>\r\n</div>\r\n```\r\n\r\n\r\n## Plugins\r\n\r\nWith Videogular you can write your own plugins through a simple API based in events. Plugins should be directives and they should communicate with `videogular` directive through an API based in events.\r\n\r\n## API Events\r\n\r\n* **VG_EVENTS.ON_PLAY**: Triggered when video plays.\r\n* **VG_EVENTS.ON_PAUSE**: Triggered when video is paused.\r\n* **VG_EVENTS.ON_PLAY_PAUSE**: Triggered when play/pause video state toggles.\r\n* **VG_EVENTS.ON_START_PLAYING**: Triggered when video starts playing after buffer.\r\n* **VG_EVENTS.ON_COMPLETE**: Triggered when video is completed\r\n* **VG_EVENTS.ON_SET_STATE**: Triggered when state changes. Possible values could be \"play\", \"pause\" or \"stop\".\r\n* **VG_EVENTS.ON_SET_VOLUME**: Triggered when volume changes.\r\n* **VG_EVENTS.ON_TOGGLE_FULLSCREEN**: Triggered when fullscreen changes.\r\n* **VG_EVENTS.ON_ENTER_FULLSCREEN**: Triggered when video enters in fullscreen.\r\n* **VG_EVENTS.ON_EXIT_FULLSCREEN**: Triggered when video exits from fullscreen.\r\n* **VG_EVENTS.ON_BUFFERING**: Triggered when video is buffering.\r\n* **VG_EVENTS.ON_UPDATE_TIME**: Triggered when video progress updates.\r\n* **VG_EVENTS.ON_UPDATE_SIZE**: Triggered when video size updates.\r\n* **VG_EVENTS.ON_PLAYER_READY**: Triggered when DOM elements are ready. Very useful to initialize plugins.\r\n\r\n## Plugin example\r\n\r\nCurrently you will find a `plugins` folder with some source code to inspire you, however, you could see how easy is to write your own plugin with this example:\r\n\r\n```js\r\nvar myVGPlugin = angular.module(\"com.2fdevs.videogular.plugins.myPlugin\", []);\r\nmyVGPlugin.directive(\"vgMyPlugin\", function(VG_EVENTS){\r\n\t\treturn {\r\n\t\t\trestrict: \"E\",\r\n\t\t\ttemplate: \"<div>my videogular plugin</div>\",\r\n\t\t\tlink: function(scope, elem, attrs) {\r\n\t\t\t\tfunction onChangeState(target, params) {\r\n\t\t\t\t\tconsole.log(\"state changed to \" + params[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on(VG_EVENTS.ON_SET_STATE, onChangeState);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n);\r\n```\r\n\r\n## Adding a plugin\r\n\r\nTo add a plugin just add your directives to your HTML. This is an example of a Videogular player:\r\n\r\n```html\r\n<div videogular vg-width=\"400\" vg-height=\"300\">\r\n    <vg-buffering></vg-buffering>\r\n    <vg-overlayPlay></vg-overlayPlay>\r\n    <vg-myplugin></vg-myplugin>\r\n\r\n    <vg-controls vg-autohide=\"false\" style=\"height: 50px;\">\r\n        <vg-playpauseButton></vg-playpauseButton>\r\n        <vg-timeDisplay>{{ currentTime }}</vg-timeDisplay>\r\n        <vg-scrubBar>\r\n            <vg-scrubbarcurrenttime></vg-scrubbarcurrenttime>\r\n        </vg-scrubBar>\r\n        <vg-timeDisplay>{{ totalTime }}</vg-timeDisplay>\r\n        <vg-volume>\r\n            <vg-mutebutton></vg-mutebutton>\r\n            <vg-volumebar></vg-volumebar>\r\n        </vg-volume>\r\n        <vg-fullscreenButton></vg-fullscreenButton>\r\n    </vg-controls>\r\n\r\n    <video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'>\r\n        <source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'>\r\n    </video>\r\n</div>\r\n```\r\n\r\nBecause AngularJS is so cool, you could just remove or add any directive and the player should work as expected. For example, you could remove `<vg-timeDisplay>{{ currentTime }}</vg-timeDisplay>` and change `<vg-timeDisplay>{{ totalTime }}</vg-timeDisplay>` for `<vg-timeDisplay>{{ currentTime }} / {{ totalTime }}</vg-timeDisplay>` to change your time display component.\r\n\r\n```html\r\n<div videogular vg-width=\"400\" vg-height=\"300\">\r\n    <vg-buffering></vg-buffering>\r\n    <vg-overlayPlay></vg-overlayPlay>\r\n\r\n    <vg-controls vg-autohide=\"false\" style=\"height: 50px;\">\r\n        <vg-playpauseButton></vg-playpauseButton>\r\n        <vg-scrubBar>\r\n            <vg-scrubbarcurrenttime></vg-scrubbarcurrenttime>\r\n        </vg-scrubBar>\r\n        <vg-timeDisplay>{{ currentTime }} / {{ totalTime }}</vg-timeDisplay>\r\n        <vg-volume>\r\n            <vg-mutebutton></vg-mutebutton>\r\n            <vg-volumebar></vg-volumebar>\r\n        </vg-volume>\r\n        <vg-fullscreenButton></vg-fullscreenButton>\r\n    </vg-controls>\r\n\r\n    <video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'>\r\n        <source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'>\r\n    </video>\r\n</div>\r\n```\r\n\r\nIn the same way you could remove `<vg-volumebar></vg-volumebar>` and leave only `<vg-mutebutton></vg-mutebutton>` and so on. That's an easy way to build your own Videogular layout.\r\n\r\nAdditionally, you will need to add your module plugins and videogular to your application:\r\n\r\n```js\r\n\"use strict\";\r\nvar videogularApp = angular.module(\"videogularApp\",\r\n\t[\r\n\t\t\"controllers\",\r\n\r\n\t\t\"com.2fdevs.videogular\",\r\n\t\t\"com.2fdevs.videogular.plugins.controlbar\",\r\n\t\t\"com.2fdevs.videogular.plugins.overlayplay\",\r\n\t\t\"com.2fdevs.videogular.plugins.buffering\",\r\n\t\t\"com.2fdevs.videogular.plugins.myPlugin\"\r\n\t]\r\n);\r\n```\r\n\r\nAnd that's all :)\r\n\r\n## Themes\r\n\r\nVideogular supports a very simple theme system through vg-theme directive and CSS styles.\r\n\r\nTo set your theme just set vg-theme attribute with a CSS url or a scope variable. If you pass a scope variable Videogular creates a binding and you just could change your theme on the fly.\r\n\r\nSetting a binding through a scope variable:\r\n```html\r\n<!-- \r\n\"theme\" is a scope variable with a value like \"themes/default/videogular.css\"\r\n-->\r\n<div videogular vg-width=\"400\" vg-height=\"300\" vg-theme=\"theme\">\r\n    <!-- Videogular plugins and video tag... -->\r\n</div>\r\n```\r\n\r\nSetting a CSS theme:\r\n```html\r\n<!-- \r\nIf you pass a String with \".css\" inside it loads and injects the CSS on the HTML\r\n-->\r\n<div videogular vg-width=\"400\" vg-height=\"300\" vg-theme=\"themes/default/videogular.css\">\r\n    <!-- Videogular plugins and video tag... -->\r\n</div>\r\n```\r\n\r\nTo change and create your own themes should be very easy just modifying `examples/css/videogular.css` file.\r\n\r\n## Credits\r\n\r\nVideogular is an open source project maintained by (literally) [two fucking developers] (http://twofuckingdevelopers.com/).\r\n\r\nWe want to thank all our contributors: [Raúl Jiménez] (https://github.com/Elecash), [Robert Zhang] (https://github.com/rogerz) and [our bug submitters] (https://github.com/2fdevs/videogular/issues?state=open).\r\n","google":"UA-41473887-1","note":"Don't delete this file! It's used internally to help with page regeneration."}